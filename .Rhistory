```{r}
```{r}
bquote("Hello")
bquote("Hello"~ 3)
bquote("Hello")
bquote("Hello" ~ 3)
bquote("Hello" ~ r[xy])
x = 2
bquote("hello" ~ .(x))
bquote("x" ~ .(x))
bquote("The answer " ~ .(x))
bquote("The answer "  .(x))
bquote("The answer "  ~.(x))
bquote(x == .(x))
bquote(x = .(x))
y = 1
bquote( function(x, y = .(y)) x+y )
x=2
bquote( function(x, y = .(y)) x+y )
eval(bquote( function(x, y = .(y)) x+y ))
eval(eval(bquote( function(x, y = .(y)) x+y )))
?plotmath
mtext(bquote(hat(theta) == .(theta)), line= .25)
theta=1.23
mtext(bquote(hat(theta) == .(theta)), line= .25)
theta = pi/4
sin(bquote(.(theta)))
bquote(.(theta))
bquote(.(theta) + 1
)
bquote(2 + .(theta))
bquote(sin((.theta)))
bquote(sin(1 + .(theta))
)
bquote(sin(1 + .(theta)))
eval(bquote(sin(1 + .(theta))))  ## sin(1 + 0.7853...)
z= bquote(sin(1 + .(theta)))  ## sin(1 + 0.7853...)
typeof(z)
is.call(z)
z
eval(z)
bquote(a+b+c )
call(z)
d = 2
bquote(a+b+c + .(d))
x = 1
quote(1 + .(x))   # 1 + .(x)
bquote(1 + .(x))  # 1 + 1
bquote(template + .(x))
bquote(help = (.topic))
bquote(help == (.topic))
subject="bquote"
mod_name="base"
bquote(help(topic = .(subject), package = .(mod_name)))
eval( bquote(help(topic = .(subject), package = .(mod_name))))
bquote(help(topic = .(subject), package = .(mod_name)))
eval( bquote(help(topic = .(subject), package = .(mod_name))))
subject="quote"
eval( bquote(help(topic = .(subject), package = .(mod_name))))
install.packages(c("httpuv", "httr", "httr2", "waldo"))
library(data.table)
source("~/code/SHINY/PART_D/CMS_PART_D_BOXPLOT.R")
```r
L = list(1,2,list(z=3))
M = list(1,2,z=list(3))
attributes()
attributes(L)
attributes(M)
ls()
search()
mtcars
?attach
attach(mtcars)
search()
hp  # no error
detach(mtcars)
search()
detach(package:lobstr)
search()
This document is about **emacs**, but written in quarto to practice quarto decorations
q
q()
rsconnetc::writeManifest()
rsconnect::writeManifest()
pak::pkg_install("admiral")
y
?derive_vars_merged
names(X01)
names(ae)
?derive_vars_merged
i
"TRTEDT" %in% ae
"TRTSDT" %in% ae
"TRTSDT" %in% adsl
X01[1:5, c(1,2,3,-1)]
names(ae)
dim(ae)
dim(adsl)
"TRSDT" %in% adsl
"TRTEDT" %in% adsl
dim(X01)
X01[1:10, 35:39]
?merge
dplyr::left_join(ae, adsl)
left_join(ae, adsl, by=c("STUDYID", "USUBJID"))
?derive_vars_merged
dim(X01)
left_join(ae, adsl, on=c("STUDYID", "USUBJID"))
left_join(ae, adsl, by =c("STUDYID", "USUBJID"))
adsl[, adsl_vars]
adsl[, eval(adsl_vars)]
!!adsl_vars
eval(adsl_vars)
adsl[, !!adsl_vars]
force(adsl_vars)
adsl[, force(adsl_vars)]
 derive_vars_merged
adsl[, !!!adsl_vars]
replace_values_by_names
 left_join(ae, adsl, by=c(STUDYID, USUBJID), new_vals = adsl_vars)
 left_join(ae, adsl, new_vars = adsl_vars, by=c(STUDYID, USUBJID))
args(left_join)
 left_join(ae, adsl, by=c(STUDYID, USUBJID))
 left_join(ae, adsl, by=c("STUDYID", "USUBJID"))
?left_join
?left_join
library(admiraldev)
replace_values_by_names(c(USUBJID))
replace_values_by_names(c("USUBJID"))
new_vars
adsl_vars
replace_values_by_names(adsl_vars)
as.character(adsl_vars)
adsl[, as.character(adsl_vars)]
exprs("TRTSDT")
exprs("TRTSDT")replace_values_by_names(c("USUBJID"))
[1] "USUBJID"
> new_vars
Error: object 'new_vars' not found
> 
z=exprs("TRTSDT")
z
!!!z
!!z
z
eval(z)
eval(adsl_vars)
as.character(eval(adsl_vars))
