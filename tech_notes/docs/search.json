[
  {
    "objectID": "310_R_notes.html",
    "href": "310_R_notes.html",
    "title": "R Notes",
    "section": "",
    "text": "Note\n\n\n\nAll R, math, statistics notes here.\nCreate a footnote: [^1] [^1]: This is footnote one."
  },
  {
    "objectID": "310_R_notes.html#nse-non-standard-evaluation",
    "href": "310_R_notes.html#nse-non-standard-evaluation",
    "title": "R Notes",
    "section": "1 NSE, Non-Standard Evaluation",
    "text": "1 NSE, Non-Standard Evaluation\nTreat code as data: ability to manipulate code before evaluated.\noperator (non-R) An operate takes a function f and returns new function g. Example: f'(x) = g(x)\n\n# test  is this grey?\n\npackage:\nPairlist\nParent Frame of function If function g() is called inside body of function f, the g has the parent frame (aka calling environment) that is execution environment of f. DRAW Diagram\nParse Convert a string (character vector) into an R Expression (ie code), which is NOT a string. Motivation is to setup R object for manipulation before evaluation. Parse(*.R) removes comments. Note: after parsing, the result is NOT character(1), a string.\nDeparse converts an R Expression to a string (character vector) .\nParse & Deparse are NOT? opposites. See Murdoch\n(latex) parse: string ==&gt; R expression (error if invalid) deparse: R expression ==&gt; string (actually: structure(expression(), scrfile)\noptions Temporary vs global vs local. Read R manual.(TODO)\n\nif, +, sin, sqrt\nC functions\nSEE ADV-R Chapter 6, code: 059 (myoldcode)\nSEE https://nsaunders.wordpress.com/2018/06/22/idle-thoughts-lead-to-r-internals-how-to-count-function-arguments/\nSEE R Internals/Ch 2\nDo not understand at deeper level\n\n\n#   TODO\n#   R complains about putting function in data.frame\n\n### check several functions\ny  &lt;- list(sin, \"sin\", c, switch, typeof, sqrt, `if`, `+`)\n\nquote(sin)\nquote(\"sin\")\nquote(c)\nquote(sqrt)\nquote(`if`)\nquote(`+`)\ndeparse(y)\ndata.frame(object = y,\n           typeof = sapply(y, typeof),\n           is.primitive = sapply(y, is.primitive),\n           is.function = sapply(y, is.function))\n\nR R has two parents: S, based on C, Fortran for statistics. R also has functional component, based on Scheme.\nIt is possible to abuse R, using it more like S code. (?)\n\n**Reification** Abstract idea to treat all code as \"data\", including functions, structures, etc. This means all such objects can be modified by code. C has. (TODO)\n\n::: {.content-visible when-format=\"html\"}\n##  Referencial Transparency\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\n\\section{Referencial Transparency}\n:::\n\nA function f is \\textbf{referencial  transparent} IF replacing x with its value\nreturns same.\n\n::: {.cell hash='310_R_notes_cache/html/unnamed-chunk-4_db6cb01b18586ac86b984f9919e50d99'}\n\n```{.r .cell-code}\nf = function(x) x\nx = 6\nidentical(f(x), f(6))\n\n[1] TRUE\n\n:::\nHowever, not all R functions have this property.\n\nx=6\nidentical(quote(x), quote(6))\n\n[1] FALSE\n\n\nReferencial Semantics Changes to values are done in memory. There is no copy.\nSubstitution When used in function with formal variable, substitute stops evaluation, captures the user’s code and returns a call (ie unevaluated )\n  substitute returns the parse tree for the (unevaluated) expression expr, substituting any variables bound in env.\nsyntax How code looks, is { in right place, a grammar.\nSyntax Sugar Syntax to make easier for human to express or write code efficiently.\nVectorize No loops, no for, no lapply. Example:\na &lt;- 1:10^4\nx &lt;- a[a %% 2 == 0]         # select elments of a vector\nExample:   array[i]  vs. get_array(array, i)\nExample:   `+` (1,2) vs.  1 + 2\nsemantics What does the code DO?\nString String (“5+5”) is NOT call. No such thing as evaluating a string. See 0210_ You can PARSE a string and then manipulate it. Simpler to eval a quote(5+5) to return the sum.\n\n1.1 String Interpolation\nMethod to substitute the value of expr into a string. Can think of it as template with holes. SEE: https://www.r-bloggers.com/2018/03/math-notation-for-r-plot-titles-expression-and-bquote/\nbquote examples SEE 410\n\nx = 5 \nbquote(x == .(x))\n\nx == 5\n\n\n\n\n1.2 Symbol\n3.1.2 Symbol lookup | In this small example y is a symbol and its value is 4. A symbol is an R object too,\n\ny = 4\ny\n\n[1] 4\n\nis.symbol(y)\n\n[1] FALSE\n\nis.name(y)\n\n[1] FALSE\n\nis.object(y)\n\n[1] FALSE\n\n# but\ny = as.symbol(y)\nis.symbol(y)\n\n[1] TRUE\n\ny\n\n`4`\n\n\nSee R Lang Ref: 2.1.3.1 Symbol (aka name), usually name of R object. Use `as.name() to coerce to symbol or quote() or atoms of parse()\n\n\nIn order to manipulate symbols we need a new element in our language: the\nability to quote a data object. Suppose we want to construct the list (a\nb). We can’t accomplish this with (list a b), because this expression\nconstructs a list of the values of a and b rather than the symbols\nthemselves. This issue is well known in the context of natural languages,\nwhere words and sentences may be regarded either as semantic entities or as\ncharacter strings (syntactic entities). The common practice in natural\nlanguages is to use quotation marks to indicate that a word or a sentence\nis to be treated literally as a string of characters. For instance, the\nfirst letter of “John” is clearly “J.” If we tell somebody “say your name\naloud,” we expect to hear that person’s name. However, if we tell somebody\n“say ‘your name’ aloud,” we expect to hear the words “your name.” Note that\nwe are forced to nest quotation marks to describe what somebody else might\nsay. We can follow this same practice to identify lists and symbols that\nare to be treated as data objects rather than as expressions to be\nevaluated. However, our format for quoting differs from that of natural\nlanguages in that we place a quotation mark (traditionally, the single\nquote symbol ’) only at the beginning of the object to be quoted. We can\nget away with this in Scheme syntax because we rely on blanks and\nparentheses to delimit objects. Thus, the meaning of the single quote\ncharacter is to quote the next object. Now we can distinguish between\nsymbols and their values:\n\nhttps://stackoverflow.com/questions/8846628/what-exactly-is-a-symbol-in-lisp-scheme"
  },
  {
    "objectID": "310_R_notes.html#referencial-transparency",
    "href": "310_R_notes.html#referencial-transparency",
    "title": "R Notes",
    "section": "Referencial Transparency",
    "text": "Referencial Transparency\nA function f is IF replacing x with its value returns same.\n\nf = function(x) x\nx = 6\nidentical(f(x), f(6))\n\n[1] TRUE\n\n\nHowever, not all R functions have this property.\n\nx=6\nidentical(quote(x), quote(6))\n\n[1] FALSE\n\n\nReferencial Semantics Changes to values are done in memory. There is no copy.\nSubstitute When used in function with formal variable, substitute stops evaluation, captures the user’s code and returns a call (ie unevaluated )\nsyntax How code looks, is { in right place, a grammar.\nSyntax Sugar Syntax to make easier for human to express or write code efficiently.\nVectorize No loops, no for, no lapply. Example:\na &lt;- 1:10^4\nx &lt;- a[a %% 2 == 0]         # select elments of a vector\nExample:   array[i]  vs. get_array(array, i)\nExample:   `+` (1,2) vs.  1 + 2\nsemantics What does the code DO?\nString String (“5+5”) is NOT call. No such thing as evaluating a string. See 0210_ You can PARSE a string and then manipulate it. Simpler to eval a quote(5+5) to return the sum.\n\nString Interpolation\nMethod to substitute the value of expr into a string. Can think of it as template with holes. SEE: https://www.r-bloggers.com/2018/03/math-notation-for-r-plot-titles-expression-and-bquote/\nbquote examples SEE 410\n\nx = 5 \nbquote(x == .(x))\n\nx == 5\n\n\n\n\nSymbol\n3.1.2 Symbol lookup | In this small example y is a symbol and its value is 4. A symbol is an R object too,\n\ny = 4\ny\n\n[1] 4\n\nis.symbol(y)\n\n[1] FALSE\n\nis.name(y)\n\n[1] FALSE\n\nis.object(y)\n\n[1] FALSE\n\n# but\ny = as.symbol(y)\nis.symbol(y)\n\n[1] TRUE\n\ny\n\n`4`\n\n\nSee R Lang Ref: 2.1.3.1 Symbol (aka name), usually name of R object. Use `as.name() to coerce to symbol or quote() or atoms of parse()\n\n\nIn order to manipulate symbols we need a new element in our language: the\nability to quote a data object. Suppose we want to construct the list (a\nb). We can’t accomplish this with (list a b), because this expression\nconstructs a list of the values of a and b rather than the symbols\nthemselves. This issue is well known in the context of natural languages,\nwhere words and sentences may be regarded either as semantic entities or as\ncharacter strings (syntactic entities). The common practice in natural\nlanguages is to use quotation marks to indicate that a word or a sentence\nis to be treated literally as a string of characters. For instance, the\nfirst letter of “John” is clearly “J.” If we tell somebody “say your name\naloud,” we expect to hear that person’s name. However, if we tell somebody\n“say ‘your name’ aloud,” we expect to hear the words “your name.” Note that\nwe are forced to nest quotation marks to describe what somebody else might\nsay. We can follow this same practice to identify lists and symbols that\nare to be treated as data objects rather than as expressions to be\nevaluated. However, our format for quoting differs from that of natural\nlanguages in that we place a quotation mark (traditionally, the single\nquote symbol ’) only at the beginning of the object to be quoted. We can\nget away with this in Scheme syntax because we rely on blanks and\nparentheses to delimit objects. Thus, the meaning of the single quote\ncharacter is to quote the next object. Now we can distinguish between\nsymbols and their values:\n\nhttps://stackoverflow.com/questions/8846628/what-exactly-is-a-symbol-in-lisp-scheme"
  },
  {
    "objectID": "310_R_notes.html#tidy-evaluation",
    "href": "310_R_notes.html#tidy-evaluation",
    "title": "R Notes",
    "section": "2 Tidy Evaluation",
    "text": "2 Tidy Evaluation\n\npronouns, to distinguish between objects in environment ls() .envcyl and  not associated with the df and data columns in df .datacyl (df)\n\nVariable Three kinds:\n* formals,x f = function(x= … )\n* local,a f = function() {a =10}\n* free, unbound, global, z f = function() (print(z))\n\n\n2.0.1 function\n\nf  &lt;- function(x=NULL) {\n    x^2\n}\n\nformals(f)      ## pairlist\n\n$x\nNULL\n\nbody(f)         ## language, $\\code{call}$\n\n{\n    x^2\n}\n\nenvironment(f)  ## environment\n\n&lt;environment: R_GlobalEnv&gt;\n\nargs(f)         ## closure\n\nfunction (x = NULL) \nNULL\n\n\n\n## returns expression\nparse(text= '2^2')\n\nexpression(2^2)\n\n## fails, does not know a is.\n# parse(text= '2a')\n\n\n\n2.0.2 call\n\nf  &lt;- function(x=NULL) {\n}\n\ncl  &lt;- call(\"f\", list(x=2))\ncl\n\nf(list(x = 2))\n\nis.function(cl)\n\n[1] FALSE\n\nis.call(cl)\n\n[1] TRUE\n\n##  Args must be evaluated, even if f is unevaluted \n    x  &lt;- 2\n    call(\"f\", list(x))\n\nf(list(2))\n\n    #call(\"f\", list(x=a))   # throws error\n\n\nres  &lt;- substitute(x+a) \nres\n\nx + a\n\nis.call(res)\n\n[1] TRUE\n\n\n::: #### K-nearest neighbors, K is given\n\\forall x \\in X , which could be any dimension , is already assigned to a region. For a new point, examine its K nearest neighbors who decide by majority vote which region x belongs to. SEE: wine example SEE: Gaglow book.\n\n\n2.0.3 Bias-Var Tradeoff.\nWith non-zero noise, of variance \\sigma^{2} the best approximate to f(x) will always have non-zero error: Isn’t there a relation betwee E, VAR? like x and p ?\n\nError = E(f_hat) + Var(f_hat) + \\sigma^{2}\n\nSEE Berkeley Crash Course; Matloff"
  },
  {
    "objectID": "310_R_notes.html#questions",
    "href": "310_R_notes.html#questions",
    "title": "R Notes",
    "section": "3 Questions",
    "text": "3 Questions\n\n#   Explain how Base R finds column name\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ndata(starwars)\ncol = \"hair_color\"\nsum(is.na(starwars[, eval(col) ]) )\n\n[1] 5\n\nsum(is.na(starwars[, col ]) )\n\n[1] 5"
  },
  {
    "objectID": "JUNK.html",
    "href": "JUNK.html",
    "title": "tech notes",
    "section": "",
    "text": "hello"
  },
  {
    "objectID": "310_R_notes.html#footnotes",
    "href": "310_R_notes.html#footnotes",
    "title": "R Notes",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis is footnote one.↩︎"
  }
]