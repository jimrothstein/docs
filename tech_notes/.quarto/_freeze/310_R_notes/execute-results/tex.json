{
  "hash": "5848d8fef225da6f02dfdf743736ad76",
  "result": {
    "markdown": "---\ntitle: \" R Notes\"\ndate-modified: today \ndate: today\npdf-engine: lualatex\nformat:\n  html: \n    toc: true\n    html-math-method: katex\n    fontsize: smaller\n    number-sections: true\n#    fontsize: 9pt\neditor:  source\noutput-dir:  docs \neditor_options: \n  chunk_output_type: console\nmargin: 1\nexecute: \n  error: true\n  cache: true\n  collapse: true\n  standalone: true\ncss:  css_examples.css\n\n---\n\n\n::: {.callout-note}\nAll R, math, statistics  notes here. \n:::\n\nCreate a footnote: [^1]\n\n[^1]: This is footnote one.\n\n<!--\n\n```\n\nTODO pdf - fix greater than equa\n\n  pdf: \n    toc: false\n    include-in-header: \n      text: |\n        \\usepackage[top=.5in, bottom=.5in, left=.7in, right=.5in]{geometry}\n        \\usepackage{amsmath,amssymb,amstext,amsfonts}\n        \\usepackage{lipsum}\n```\n-->\n\n------------------------------------------------------------------------\n\n::: {.content-visible when-format=\"html\"}\n:::\n\n\n\n\n```{=html}\n<!--\nfile <- \"/home/jim/code/docs/R_DEFINITIONS_AND_EXAMPLES.qmd\"\n\nPURPOSE:    R Definitions Plus Code Examples\n\n      :!quarto render %\n-->\n```\n\n\n<!--\nThis is a `child` document to R_notes.\n\nNote this file begins with underscore _.   Quarto will not render it\nseparatedly.\n-->\n\n### Future!\n-   reactR - connect js/html widgets?  Need?\n-   Health Labs - enter Ox data\n-   040 - sapply, joins, cartesian, 1-example each, cheat, see Jeremy Owens SQL table str, foreign key etc.\n-   tidygeocoder:: US map, simple examples?\n-   Review June's articles\n\n\n\n### Environemnts, Namespacds\n-   conflicted package.\n\n### Metaprogramming, NSE  \n\n-   Hadley, Advanced R, version 1 (Expressions)\n-   Quoting/Eval:  Lionel: https://rpubs.com/lionel-/programming-draft  \n  -   https://rpubs.com/lionel-/tidyeval-introduction\n  -   https://rpubs.com/lionel-/tidyeval-dplyr-recipes\n  -   {{}} * https://www.tidyverse.org/blog/2019/06/rlang-0-4-0/\n  -   https://rpubs.com/lionel-/superstache\n  \n-   function masking/pkgs: https://www.r-bloggers.com/2013/09/control-the-function-scope-by-the-r-package-namescope/ (using namespace to control scop)\n-   {}} - https://www.r-bloggers.com/2019/06/curly-curly-the-successor-of-bang-bang-2/\n-   env stack - https://www.r-bloggers.com/2014/12/tips-on-non-standard-evaluation-in-r/\n-   quoting, dplyr - https://www.r-bloggers.com/2019/07/bang-bang-how-to-program-with-dplyr/\n-   2012 namespace pkg, by Hadley, et al : https://cran.r-project.org/web/packages/namespace/index.html\n-   https://www.rostrum.blog/2023/03/03/getparsedata/ (parse, tokens,  more advanced)\n\n-   **Examples**\n  - http://zevross.com/blog/2018/09/11/writing-efficient-and-streamlined-r-code-with-help-from-the-new-rlang-package/ (mostly ggplot2)\n  - Murdoch,  R Journal vol 2/2 2010\n  - statisticsglob.com (several parse examples)\n  - advanced-r-solutions.rbind.io/expressions.html\n  - Tierney, codeTools ?\n\n-   **Manuals:**\n  - ns-load: https://stat.ethz.ch/R-manual/R-devel/library/base/html/ns-load.html\n  - getFromNamespace: https://stat.ethz.ch/R-manual/R-devel/library/utils/html/getFromNamespace.html\n  - R-exts:package-ns: https://cran.r-project.org/doc/manuals/R-exts.html#Package-namespaces\n  - R-ints 1.2 https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Environments-and-variable-lookup\n    R-Lang 2.1.3 Language Objects (calls, expressions, names)\n    R-Lang 6 Compute on Language: https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Computing-on-the-language\n\n\n-   **stackoverflow**\n  - https://stackoverflow.com/questions/14988722/in-r-what-does-loaded-via-a-namespace-and-not-attached-mean\n  - {{}}https://stackoverflow.com/questions/62791997/what-is-the-embracing-operator\n-   \n-   **Posit**\n  - ns, but not in package: https://community.rstudio.com/t/is-it-dangerous-to-create-a-namespace-for-functions-in-a-script-without-a-package/91141\n\nUseful?\n    -   wrapr https://winvector.github.io/wrapr/index.html\n\n\n\n::: {.content-visible when-format=\"pdf\"}\nWill only appear in HTML.\n\\renewcommand{\\familydefault}{\\sfdefault}\n\n\\section{R Definitions \\& Examples   (TERSE)}\n\n\\section{Manuals}\n\n```         \n```\n\n\\\\section(Definitions}\n\n:::\n\na term\n:   its definition\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n**attach**\n    -   add df/list/datafile/env to search list, at a `pos` and `name`\n    -   added to R ~1988   [Add Link]\n    -   compare to `with`\n\n\nexplain process:  capture unevaluated code; manipulate it; later evaluate\n\n\n-\tdefuse, substitution, quasiquotation, \n-\tinjection (into unevaluated expression)\n-\tdefuse &  inject are opposites\n-\tembrase {{}}, tells function must first evalute the unevaluated content inside {{}}\n\n\n**bindings:**\n-   link between name (symbol) and an object\n-   EX:   f (name) and the definition (function(x) {...})\n\n**Call** A call is an unevaluated function, together with arguments that are\n\n### create a call\n-   See:  R-lang 6.5, call, sys.call v match.call\n\n\n\n::: {.cell hash='310_R_notes_cache/pdf/unnamed-chunk-1_7edcd3f9eae442600697e14a8051d50c'}\n\n```{.r .cell-code}\n#| label: intro_call\n#| collapse: true\n#| include: true\nf  <- function(x) {\n    x^2}\ncl  <- call(\"f\", 3)\n\n# display f as unevaluated f(3)\ncl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nf(3)\n```\n:::\n\n```{.r .cell-code}\n##  Test for call.\n    is.call(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n    is.call(\"f\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n    is.call(cl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n##  To evaluate a call.\n    eval(cl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\n\nLike symbol, expression, call is typeof 'language'.\n```\nthree kinds of language objects that are available for modification, calls,\nexpressions, and functions\nr-lang 6.1\n```\n\nis.call() is T only for calls. See: \"in try... 4010_match_call_examples.Rmd\"\n\n***\n\n**Calling environment of a function** To run, a function must be called.\nCalling environment refers to environment of the calling function. Also called\nparent environment. Not to be confused with a function environment. See example\n??  The `calling function` is function actually making the call.\nf = function()g()  # f is calling function\n\n**Currying** Takes a function, partially evaluates, and returns as new\nfunction. Example: f(x,y,z) evaluated at z=a, returns g(x,y) = f(x,y,a)\n\n**context** internal, stack of C structs, track execution (see R Internals 1.4)\nAllows flow control \\| error reporting (traceback) \\| sys.\\* to work. (except\nsys.status)\n\nClosures create context.  internals do not. primitives only in special\nsituations. (sys.frame, sys.call count closures from either end of context\nstack)  TODO  - do not understand.\n\nContexts are Not counted, not reported, not on stack, and coder has no\naccess to these functions.\n\nREF:  R Internals 1.4\n\n**byte code** \"Readable\" concise instructions; not machine code; no user\naccess; use JIT compiler or interpeter\n\n**Deparse** See **parse**.\n\n**Evaluation or execution environment** In R, a function runs in an environment\nspecific to that function. Also referred to as frame or context. This frame\nholds evaluation environment. The frame ends when the function completes.\n\n**Evaluation**  parser, evaluator \n\n```\nWhen a user types a command at the prompt (or when an expression is read from a\nfile) the first thing that happens to it is that the command is transformed by\nthe parser into an internal representation. The evaluator executes parsed R\nexpressions and returns the value of the expression. All expressions have a\nvalue. This is the core of the language. \n\n```\n https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Evaluation-of-expressions\n\n**Expression** expression() takes an R object and returns expression, which a R\nlist.  Note:  a `statement` is code that may do things (side effects) but does\nnot return anything.\n\n**Expression v Language** R expressions based on list and can be broken down\nfurther. Often these are language pieces. Lanugage use pairlists.\n\n**First Class** - A function can also be used as an argument to another\nfunction. Example: lapply(list(), mean)\n\n**Frame vs Environment** Frame refers to the calling stack of functions.\nEnvironment, in R, is property of function, where it looks to find non-local\nvariables.\n\n**Function, properties** formals(f) arguments in function defintion body(f)\ncode environment(f) finds values of non-formal (non-local) variables where the\nfunction was created. **Higher Order Function** Function that takes another\nfunction as an argument and ...\n\n**immutable**\n\n**Interactive vs. Non-Interactive** R, or S, originally designed to be\ninteractive, ie command and response at console. .R, .Rmd, Rscript, R CMD BATCH\n(TODO: some error conditions do not work in BATCH ??)\n\n**Lambda Calculus** Instead of naming function (f(x,y) = x\\^2 + y\\^2) create\nabstraction. (x,y) --\\> x\\^2 + y\\^2. Or instead of g(x) = x + 2; write\nlambdax.x+2. Easy to chain\n\n**Lexical Scope** How R function finds *unbound* variables: in environment\nwhere function was created. **Dynamic Scope** Method to find variables in Call\nStack at runtime. R uses Lexical Scope, however the R Language allows coder to\nselect environment to evaluate variables. (REF: June Choe Slack/Nov 3 2021)\n\nScheme added (?) Portion of code in which binding applies to a variable??\n\nIn R, an \"evaluator\" find any \"unbound symbols\" (in an expression) by using\nvariable bindings in effect when created.\n\n**match** - match.arg - match.call - match.fun\n\n**namespace:**\nREF: https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Namespaces\n| Namespaces are environments associated with packages (and once again the base\npackage is special and will be considered separately). A package pkg defines\ntwo environments namespace:pkg and package:pkg: it is package:pkg that can be\nattached and form part of the search path.\n\n\n::: {.content-visible when-format=\"html\"}\n##  NSE, Non-Standard Evaluation\nTreat code as data:   ability to manipulate code before evaluated.\n:::\n\n**operator** (non-R) An operate takes a function f and returns new function g.\nExample: $f'(x) = g(x)$\n\n\n\n::: {.cell hash='310_R_notes_cache/pdf/unnamed-chunk-2_f3df4175809b35101a559eb5400c7ca4'}\n\n```{.r .cell-code}\n# test  is this grey?\n```\n:::\n\n\n\n\n**package:**\n\n**Pairlist**\n\n**Parent Frame of function** If function g() is called inside body of function\nf, the g has the parent frame (aka calling environment) that is execution\nenvironment of f. DRAW Diagram\n\n**Parse** Convert a string (character vector) into an R Expression (ie code), which is\nNOT a string. Motivation is to setup R object for manipulation *before*\nevaluation. Parse(\\*.R) removes comments. Note:  after parsing, the result is\nNOT character(1), a string.\n\n**Deparse** converts an R Expression to a string (character vector) .\n\nParse & Deparse are NOT? opposites. See Murdoch\n\n(latex) parse: string ==`>` R expression (error if invalid) deparse: R\nexpression ==`>` string (actually: structure(expression(), scrfile)\n\n**options** Temporary vs global vs local. Read R manual.(TODO)\n\n\\subsection{Primitive vs Internal function}\n\n-   `if`, `+`, sin, sqrt\n\n-   C functions\n\n-   SEE ADV-R Chapter 6, code: 059 (myoldcode)\n\n-   SEE https://nsaunders.wordpress.com/2018/06/22/idle-thoughts-lead-to-r-internals-how-to-count-function-arguments/\n\n-   SEE R Internals/Ch 2\n\n-   Do not understand at deeper level\n\n\n\n::: {.cell hash='310_R_notes_cache/pdf/primitive_12759e51c8fbdc39293ab9a6e4be1084'}\n\n```{.r .cell-code}\n#   TODO\n#   R complains about putting function in data.frame\n\n### check several functions\ny  <- list(sin, \"sin\", c, switch, typeof, sqrt, `if`, `+`)\n\nquote(sin)\nquote(\"sin\")\nquote(c)\nquote(sqrt)\nquote(`if`)\nquote(`+`)\ndeparse(y)\ndata.frame(object = y,\n           typeof = sapply(y, typeof),\n           is.primitive = sapply(y, is.primitive),\n           is.function = sapply(y, is.function))\n```\n:::\n\n\n\n**R** R has two parents: S, based on C, Fortran for statistics. R also has\nfunctional component, based on Scheme.\n\n```         \nIt is possible to abuse R, using it more like S code. (?)\n\n**Reification** Abstract idea to treat all code as \"data\", including functions, structures, etc. This means all such objects can be modified by code. C has. (TODO)\n\n::: {.content-visible when-format=\"html\"}\n##  Referencial Transparency\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\n\\section{Referencial Transparency}\n:::\n\nA function f is \\textbf{referencial  transparent} IF replacing x with its value\nreturns same.\n\n::: {.cell hash='310_R_notes_cache/pdf/unnamed-chunk-4_0b3c9610d3ec45f7fc4f4602476845b2'}\n\n```{.r .cell-code}\nf = function(x) x\nx = 6\nidentical(f(x), f(6))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\nHowever, not all R functions have this property.\n\n\n\n::: {.cell hash='310_R_notes_cache/pdf/unnamed-chunk-5_4aed81f83c5d852531721dc7e6485f06'}\n\n```{.r .cell-code}\nx=6\nidentical(quote(x), quote(6))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\n**Referencial Semantics** Changes to values are done in memory. There is no\ncopy.\n\n**Substitute** When used in function with formal variable, substitute stops\nevaluation, captures the user's code and returns a call (ie unevaluated )\n\n**syntax** How code looks, is { in right place, a grammar.\n\n**Syntax Sugar** Syntax to make easier for human to express or write code\nefficiently.\n\n**Vectorize** No loops, no for, no lapply. Example:\n\n```         \na <- 1:10^4\nx <- a[a %% 2 == 0]         # select elments of a vector\n```\n\n```         \nExample:   array[i]  vs. get_array(array, i)\nExample:   `+` (1,2) vs.  1 + 2\n```\n\n**semantics** What does the code DO?\n\n**String** String (\"5+5\") is NOT call. No such thing as evaluating a string.\nSee 0210\\_ You can PARSE a string and then manipulate it. Simpler to eval a\nquote(5+5) to return the sum.\n\n\n::: {.content-visible when-format=\"pdf\"}\n\\section{String Interpolation}\n:::\n::: {.content-visible when-format=\"html\"}\n### String Interpolation\n:::\n\nMethod to substitute the value of expr into a string. Can think of it as `template` with holes.\nSEE: https://www.r-bloggers.com/2018/03/math-notation-for-r-plot-titles-expression-and-bquote/\n\nbquote examples  SEE 410\n\n\n::: {.cell hash='310_R_notes_cache/pdf/unnamed-chunk-6_a1a14c51dc08a5f62a6006cff6f225fb'}\n\n```{.r .cell-code}\nx = 5 \nbquote(x == .(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx == 5\n```\n:::\n:::\n\n\n\n### Symbol\n\\section{Symbol}\n\n[3.1.2 Symbol lookup](https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Symbol-lookup) \n| In this small example y is a symbol and its value is 4. A symbol is an R object too, \n\n\n\n::: {.cell hash='310_R_notes_cache/pdf/unnamed-chunk-7_22c220a00382612b726eea42f26b9c5f'}\n\n```{.r .cell-code}\ny = 4\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nis.symbol(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.name(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.object(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# but\ny = as.symbol(y)\nis.symbol(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n`4`\n```\n:::\n:::\n\n\n\nSee **R Lang Ref: 2.1.3.1**   Symbol (aka name), usually name of R object.  Use\n`as.name() to coerce to symbol or quote() or atoms of parse()\n\n```\n\n\nIn order to manipulate symbols we need a new element in our language: the\nability to quote a data object. Suppose we want to construct the list (a\nb). We can’t accomplish this with (list a b), because this expression\nconstructs a list of the values of a and b rather than the symbols\nthemselves. This issue is well known in the context of natural languages,\nwhere words and sentences may be regarded either as semantic entities or as\ncharacter strings (syntactic entities). The common practice in natural\nlanguages is to use quotation marks to indicate that a word or a sentence\nis to be treated literally as a string of characters. For instance, the\nfirst letter of “John” is clearly “J.” If we tell somebody “say your name\naloud,” we expect to hear that person’s name. However, if we tell somebody\n“say ‘your name’ aloud,” we expect to hear the words “your name.” Note that\nwe are forced to nest quotation marks to describe what somebody else might\nsay. We can follow this same practice to identify lists and symbols that\nare to be treated as data objects rather than as expressions to be\nevaluated. However, our format for quoting differs from that of natural\nlanguages in that we place a quotation mark (traditionally, the single\nquote symbol ’) only at the beginning of the object to be quoted. We can\nget away with this in Scheme syntax because we rely on blanks and\nparentheses to delimit objects. Thus, the meaning of the single quote\ncharacter is to quote the next object. Now we can distinguish between\nsymbols and their values:\n\nhttps://stackoverflow.com/questions/8846628/what-exactly-is-a-symbol-in-lisp-scheme\n```\n##  Tidy Evaluation\n-   pronouns, to distinguish between objects in environment ls() .env$cyl and\n  not associated with the df and data columns in df .data$cyl (df)\n\n**Variable** Three kinds:\\\n\\* formals,x f = function(x= ... )\\\n\\* local,a f = function() {a =10}\\\n\\* free, unbound, global, z f = function() (print(z))\n\n------------------------------------------------------------------------\n\n#### function\n\n\n\n::: {.cell hash='310_R_notes_cache/pdf/function_9ec8d797baa0438322faf76318d365e9'}\n\n```{.r .cell-code}\nf  <- function(x=NULL) {\n    x^2\n}\n\nformals(f)      ## pairlist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$x\nNULL\n```\n:::\n\n```{.r .cell-code}\nbody(f)         ## language, $\\code{call}$\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n    x^2\n}\n```\n:::\n\n```{.r .cell-code}\nenvironment(f)  ## environment\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<environment: R_GlobalEnv>\n```\n:::\n\n```{.r .cell-code}\nargs(f)         ## closure\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x = NULL) \nNULL\n```\n:::\n:::\n\n::: {.cell hash='310_R_notes_cache/pdf/parse_3ed04d9016d4b3881274c9c78b47b57f'}\n\n```{.r .cell-code}\n## returns expression\nparse(text= '2^2')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nexpression(2^2)\n```\n:::\n\n```{.r .cell-code}\n## fails, does not know a is.\n# parse(text= '2a')\n```\n:::\n\n\n\n#### call\n\n\n\n::: {.cell hash='310_R_notes_cache/pdf/call_2db49a5ba5ce8bb05f45e8ef0a0e86df'}\n\n```{.r .cell-code}\nf  <- function(x=NULL) {\n}\n\ncl  <- call(\"f\", list(x=2))\ncl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nf(list(x = 2))\n```\n:::\n\n```{.r .cell-code}\nis.function(cl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.call(cl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n##  Args must be evaluated, even if f is unevaluted \n    x  <- 2\n    call(\"f\", list(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nf(list(2))\n```\n:::\n\n```{.r .cell-code}\n    #call(\"f\", list(x=a))   # throws error\n```\n:::\n\n::: {.cell hash='310_R_notes_cache/pdf/sub_1d1b7502b008c9c1d9b7bb08fd48ef32'}\n\n```{.r .cell-code}\nres  <- substitute(x+a) \nres\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx + a\n```\n:::\n\n```{.r .cell-code}\nis.call(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n:::\n####    K-nearest neighbors, K is given\n\n$\\forall x \\in X$ , which could be any dimension , is already assigned to a region.\nFor a new point, examine its K nearest neighbors who decide by majority vote which region $x$ belongs to.\nSEE:  wine example\nSEE:  Gaglow book.\n\n####    Bias-Var Tradeoff.\nWith non-zero `noise`, of variance $\\sigma^{2}$  the best approximate to $f(x)$ will always have non-zero error:\nIsn't there a relation betwee E, VAR?    like x and p ?\n\n$$\nError = E(f_hat) + Var(f_hat) + \\sigma^{2}\n$$\nSEE Berkeley Crash Course; Matloff\n\n\n\n##  Questions\n\n\n::: {.cell hash='310_R_notes_cache/pdf/unnamed-chunk-8_3f6e3c3fdf616c195fc5203cc8143fb3'}\n\n```{.r .cell-code}\n#   Explain how Base R finds column name\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\ndata(starwars)\ncol = \"hair_color\"\nsum(is.na(starwars[, eval(col) ]) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nsum(is.na(starwars[, col ]) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}