**  TODO
    -   USEFUL ??
    -   quarto:  focus on html (not pdf)
    -   use folds, to simplify navigating this document
    -   **no R here, no Stats**
    -   HTTR2 notes = mess
    -   Break this document into separate files, merge into one big one?
	
  -	

<2024-07-01 Mon>
- ex looks very useful!
- another attempt with lintr, styler, ... (did some reading)
- SO(3) - not sure what I am asking;  normal subgroups, symmetries?
  
<2024-06-29 Sat>
- got flycheck,  usethis::use-tidy_style working; lintr now auto works.
- M-: ess-style reports 'Rstudio'
- NEED to do:
  - fix "_"
  - get styler to auto format upon file save.
  - do not understand: ess-r-mode; define-key; add-hook 


**  29-May-2024:   Upgrade to R 4.4,  Linux Mint 21.3 (Virginia)
-   This is a nightmare.  There are  several discrete steps;  Do one at time!
-   get public key;  import;  convert .asc to .gpg (if needed); cp .gpg   to Debian's ring

-   gpg  keys;  Debian: see apt-secure,  READ carefully, but it doeswork.
-   gpg  --list-keys

-   need  the correct  deb line,   for /etc/apt/sources.list
-   In current setup,   I actually on    Ubuntu 22.04, "jammy" (and not Debian,  not `linuxmint`   b/c it  is uusing Ubuntu)
-   So   MESSAGE:   when apt  update  shows errors  -   FIX  them and you will be on right path!

**  PGP
-   KEY SIGNING:  (summary)   I can create public-private keypair.   If I 'sign'  doc with private key,   then anyone with my public key can READ and  will  know   ONLY  I could have encryted the file.
-   Encrypt with my PUBLIC KEY,   then only  someone with my PRIVATE  KEy can   read it.
-   ALL  keys  belong on  Debian key ring.





** CHANGES:
-  22-July-2023 LinuxMint upgrade  to 21.2 'victoria' via menu: upgrade, no issues.
	    version: /etc/linuxmint/info 
-  18APR 2023  LinuxMint .. removed Timeshift program and all files (it retains
    daily/weekly/ image of drive) and fills root (\) partition in no time.


** Changes to this document:
- 05JUNE2024  - converting to emacs  org (from quarto .qmd)

**  PURPOSE:		
Misc Tech Notes;  details, notes can be here (but COMMANDS put
on INDEX C).  Math, R, probability and stats notes **do NOT go here*


** emacs/org mode/eLisp

*** yasnippets

- put in ~/.emacs.d/snippets/ESS-mode/<snip>
- in that folder, use test.R to practice

*** RTFM
- Ch 1; Mode Line, Menu Bar (F10)
- Ch 11; Help (in detai) https://www.gnu.org/software/emacs/manual/html_node/emacs/Help.html
  - C-h a dired  (help for topics apropro 'dired')
  - C-h C-f  FAQ


- annotated examples: https://gitlab.com/taonaw/taonah/-/blob/master/public/emacs_settings.org
- isearch
- shell mode (C-c M-o) clears

- use-package  replaces need to download/config install
https://ianyepan.github.io/posts/setting-up-use-package/



**	IMPERATIVE v DECLARATIVE
-	math notation is DECLARATIVE;   indicates meaning, not exact details
  (example1:  summation sign).  Tell computer what you WANT, leave details to
  compiler or program.
-	IMPERATIVE (older, obsolete?) every detail, machine language?
##  QUARTO:
2023-12-06 -  Try couple of cv or resume templates and one quarto extension.   Seemed to be more work than worth.  Just use Rmarkdown to create resume.
2024-01-26	READ r4ds Ch 28-29 b/c Quarto and config knitr


**  {X11, Wayland, video}

**Warning:**  Stay with X11 (proven, well-supported, works)

Wayland is open source \textit{protocol} replacement for X windows, (widgets
says get graphics from X or Wayland).
WESTON is reference implementation.

Because Wayland accepts same toolkits (Qt, GTK) as X, the impact for developers
and users should be minimal.  Wayland shrinks X;  much functional now in Linux
kernel.  

~/.xsession-errors - Unlike cli, GUIs have no console;   errors err redirected to this file
~/.Xauthority - is random code to control which progams output to my X11 session


** {PDF, Pandoc, Latex}

*** PDF Notes   [ignores html, css; also ignores YAML header (pandoc & ::render()]
2023-12-30
-	tlmgr controls much latex install: fonts, *.sty, but lately Yuhi seems
  to embedded tlmgr and never explicitly need to use it and never explicitly
  need to use it
-	for PDF:   pdf2latex, pdflatex (pandoc will do it, but complain)
-		   in R, tinytex::latexmk()

 To create pdf, just about everything works:  pandoc, markdown, latex, knitr..
 Note:  zathura uses library, open source `popler`.


  NOTE:   Missing latex .sty ?  
		-	With .tex file, run (in R) tinytex:latemk(*.tex) to install
		- OR, use tlmgr install <font>
		-	fonts installed?  fc-list : family
		- also luaotfload (loads fonts)
		-	ENGINE=software (such as **luatex**, tex, pdftex) 
		-	FORMAT=macros (such as **lualatex**)

  (Jan 2022) **Missing font, package?   TinyTex**
  *  update R
  *  keep_tex:  true (in YAML)
  *  at R console  tinytex::lualatex(".... .tex"), or tinytex::latexmk("*.tex")
  *  ~~ some times works, sometimes not ~~

  Lua in *.tex file
  *  see ~/code/publish_project/TEX/




(pre-Quarto !)  HTML [to produce HTML with pandoc, all latex is IGNORED.]  

I do **not** know how to create fancy HTML files from knitr, pandoc.

 HTML is pain in ass and HUGE time waste.  Pandoc can handle markdown and
 small amounts of latex (math) b/c ppl have added filters or other widgets to
 pandoc.

 If using Latex, its packages, diagrams with Latex ... must go with PDF.

-H header  
-V or --variable  
--pdf-engine=xelatex  



-	Try verbatum; process as a markdown.
pandoc balks at processing straight text if it thinks it sees markdown.
If lucky, !pandoc % -o file.pdf will work.

***  section{LATEX NOTES}

-	Tikz seems to be most popular way to gaphics vs **pstricks**.

	footnote: \par
	**postscript** a more powerful programming language than tex; **pstricks**,
	ghostscript; pdf (a subset of postscript) hails from this.  However, using
	postscript with latex requires addins, such as ghostscript; drivers; ...
	Avoid **postscript** and packages pstricks, even if greater capability.

Original tex was 320 low-level cmds (aka primitives). 
Macros created from these.
But actual engine (tex) hidden from user.


**LuaTex** (engine) is re-write of core TEX engine (hard, written in C).  
Therefore, **LuaTex** added primitives, more open (can use tex or lua)

**LuaLatex** is macro package.

EXAMPLE:  In .tex file, write lua:  directlua is new primitive; lua api inside
value for  

$$\pi = \directlua{tex.sprint(math.pi)}$$

*** revealjs slides with Quarto



** make
- Make:  seldom use; but I did collect many examples of zsh, ls + regex examples, zsh commands re:  disk, storage, files ..., R to create packages
- Therefore, do not discard make_project directory
- https://github.com/jimrothstein/make_project
-https://github.com/mxenoph/cheat_sheets/blob/master/make_cheatsheet.pdf
  

** section(R}
-	No R;  use 310_

##	GIT commands   SEE INDEX Cars
HEAD - can point to branch (tip) or a commit (detached HEAD). Commits are
immutable. HEADS can move around.


** Install R
   - on Ubuntu,  or mintlinux virgina,  use  jammy and  follow https://cran.r-project.org/bin/linux/ubuntu/ (works)   


**  section{Lua}

-   TODo:  move lua into lua_project as code; or index or .....

-   luarocks - project to allow developers to integrate lua modules, dependenices into their lua code.

-   In lua, nil or false evaluate to:  false
0 or '', evaluate to: true


Lua + neovim:
    *  code is lua.
    *  but calls the neovim API | look careful, can see the vim
        *  api.nvim...command("enew") -- creates new file and edits.
        *  vim.bo[0],buftype=nofile

--  These are vim api ,  called by lua


-- shortcuts:
local cmd = vim.cmd
cmd("pwd")   -- execute vim Ex: command 

-- current file name:  
:lua print(vim.fn.expand('%')  

--  set vim options
:lua vim.api.nvim_command('set nonumber')   
:lua vim.api.nvim_command('set number!')        -- toggle
:lua vim.api.nvim_command('echo "Hello, Nvim!"')

--  list buffers, vim.cmd is alias for vim.api.nvim_exec()
:lua vim.cmd('buffers') 

-- print
:lua print(_VERSION)
:lua print("hi")

-- print, datatypes
-- Data types are converted correctly
print(vim.api.nvim_eval('1 + 1')) -- 2
print(vim.inspect(vim.api.nvim_eval('[1, 2, 3]'))) -- { 1, 2, 3 }
print(vim.inspect(vim.api.nvim_eval('{"foo": "bar", "baz": "qux"}'))) -- { baz = "qux", foo = "bar" }
print(vim.api.nvim_eval('v:true')) -- true
print(vim.api.nvim_eval('v:null')) -- nil


vim.api.nvim_command('new')

-- To run a lua file
:luafile %
x = 41
if x > 40 then
  print('over 40')
else
  print('under')
end

-- verb (in init.vim)
-- y{motion} will highlight for you!
-- :au TextYankPost * silent! lua vim.highlight.on_yank() 

-- This is a .lua file
-- To source it from .vim:   :luafile <file>
-- :luafile % will also work.
x = "hello"
print(x)

-- tools.lua
local api = vim.api
local M = {}
function M.makeScratch()
  api.nvim.command('enew') -- equal to :enew
  vim.bo[0].buftype=md
end
return M


-- in vim
-- create new command (fails)
-- :command! Scratch lua require'0001_tools'.makeScratch()
--



-- :lua vim.wo.number = true
-- vim.api.nvim_set_win_option('number', true)
-- lua print(vim.wo.number)

-- in a lua file only need following  (and reload)
vim.wo.number = true
vim.wo.number = false
vim.bo.shiftwidth = 4    
  

--end



** NEOVIM NOTES

*** neovim, nvim, vim  update to latest version
{
 Tue  02 Nov 2021 (also 30 DEC 2021)
-  download nvim.appimage | place in ~/bin/ | will overwrite prior
-  change permissions to  764
-  do not touch soft link nvim --> nvim.appimage
-  nothing more than this.

 Wed  09 Feb 2022

-   neovim TERMINAL BUFFER has 2 modes:  Normal (move around as usual, gf, y
etc) and a NEW MODE:  Terminal mode.  This mode means we see BASH cursor.
Anything entered goes there.  There is NO INSERT/EDIT Mode.  You deal with
Terminal mode at the ACTIVE line only.
See #75 Vimcast

-   This mapping copies line , inserts into terminal buffer and runs
noremap <leader>tl Vy<C-w>wpa<CR><C-\><C-n><C-w>pj
}

*** VIM writing_notes

*jim_writing_notes1*

http://www.terminally-incoherent.com/blog/2013/06/17/using-vim-for-writing-prose/
:h help-writing
## hard wrap is friend  

a=automatic reformat
t=wrap at textwidth

setlocal formatoptions=ant
setlocal textwidth=80
setlocal wrapmargin=0
setlocal foldcolumn=3 		"trick, to set left margin	 


Long parapgarapja l;akdsjf asalkfjas d; asdfk;ladsjf  lk;adjf a;lkaf as;l
asdfjl; adsfl;kj d;as fasdj;lkj afds;lkj 

***  Folds
26FEB2022  set to use treesitter;  don't seem to work

***	Turn off indents

(no c indents)

setlocal noautoindent  
setlocal nocindent  
setlocal nosmartindent  
setlocal indentexpr=  


*** HELPTAGS and Ctags are NOT related (do not confuse).

for ctags:
:h tags-file-format

To change file:  edit this file as regular file.
Dislike Highighting?   :set syntax=off
Add a tag:     surround new tag with * ; plus prose to describe tag
Add a hotlink:   ONLY in same file (I think) surround new tag with |

Run :helptags ALL to regenerate file called tags
/doc file (singular) :  should see this .txt file and tags file



*** VIM help 1

:h windows.txt
:h vert
:h splitright


:h new   " open new WINDOW
:h enew  " new buffer, in current window

*jim_system_stuff*
:view $VIMRUNTIME
:view $TEMPLATES

*jim_auto_commands*
:h autocmd
:h au



[all docs files](~/docs/)
[code files](~/code/)

:h abbreviation
:h help-summary
:h helphelp
:h help.txt
:h helpgrep
:h usr_toc.txt
:h index

:h startup
:h cmdline 
:h exe    (use cmd line to run normal cmds?)
:h startinsert


****  Help for common tasks

:h :abbreviate
:h :augroup
:h :changes
:h :highlight
:h :syntax
:h :command
:h :file
:h :filetype
:h :messages
:h :options  :h options.txt  :h :set
:h :omni
:h :complete  "NOTE:  nvim does NOT have cmd-line completion like C-N, C-P
:h map-listing

:h :scriptnames
:h man  (use vim for manpages)


*jim_split*
:h :split
:vert help    " open help in vertical split

(N) !!date, insert date

:resize -3 <CR>  " reduce size of window
:vertical resize -3 <CR>

$VIMRUNTIME (inside the image app)
:!ls $VIMRUNTIME

*** Windows, splits
:h usr_07.txt
:h usr_08.txt
:h windows.txt
:h CTRL-W    


*** statusline  %m (modify?) %y (filetype) ...
:h statusline
:echo expand("%m")  
:set statusline=%t
:set statusline+=%{&ff}

Ranges (in file)
:h range
:., 'a
:., +2
3 lines below to end - 5 lines
:.+3, $-5

*** insert mode
:h insert.txt
:h insert-index
:h i_CTRL-R

<C-R>% inserts file name:
/home/jim/docs/misc_files/005_tech_notes.md

<C-R>=system("ls")  inserts listing


Insert in bulk:
:i or :a  followed by . when done


Registers
:echo @a 
:let @a="hello"


Plugins
:h Vimux
:call VimuxRunCommand("ls")
:VimuxPromptCommand<CR>
Lazy:	review ~/.localshare/kickstart/lazy
(some have ftplugins/after)
-	ftplugin one method of adding ft specific code (vs autocmd)

To Close:
:VimuxCloseRunner<CR>


Syntax Highlighting
:h usr_06.txt

vim initialize
:vert h nvim_R
:tab help

:vert h nvim-R  " opens help to right
:let R_nvimpager = "vertical" default, (can be "tab", "tabnew")

vim & grep (search both *.R and *.Rmd - note | is escaped)
:grep -EHRn 'binomial' ~/code/**/*.(R\|Rmd)

vim tabs
tabs   :tabn :tabp :tabnew

READ: cmds to open windows at various localations:  bo, above ...


:h reference_toc
:h help
:h help-summary
:h cmd   (:h ls)
:helpgrep fold*  (no quotes)

"all tags
:h quickref.txt 

"index
:h usr_toc.txt

:h reference_toc   (all *.txt files)
:h local-additions (plugins)

:h motions.txt (jumps, motions, find next } etc)


*** search
    /foo/+1    find foo  and move +1 line down 
/foo/0     find .... but move to beginning of line 
/foo/e-1    find ... then move back 1 character.


:h i_{}      (insert, delete, visual, ...)

:h :ex_cmd

:h 'option'

:h func()

:h /[     (escape regex character)

:h ft-r-indent    (for plugin r)
:h ft-json-....   (for plugin json)

end neovim 



\newpage


** REGEX
- TODO import (?) all REGEX/* files to here

- for regex reading see 300_tech_reading.md
  

# -----------------------
##	DOCUMENT REGEX  HERE
##  (text, no examples in this file)
# -----------------------
/home/jim/code/docs/tech_notes/REGEX.md


2024-04-30
-	Use a cheat sheet
-	Reduce paper
-	Annotate (here, or in 2 files) ONLY when needs

## this file: ~/code/docs/tech_notes/REGEX.md
## ~/code/docs/tech_notes/001_grep_regex_P_examples.qmd
## ~/code/docs/tech_notes/002_grep_examples.md
##	SOME regex:  in ~/code/zsh_project/ZSH_SH_FILES/


##	REGEX
TODO:
	-	sed, when to use?
	- emphasize goal:  use grep -P, regex to understand how REGEX works.  Tired
	of every 6 months learning all over again.
	-	greedy/not greedy  and backtrack .   Think like a regex engine!
	-	How to aerate regex !
	-	regex can be used to:
		-	find
		-	validate
		-	replace/insert
		-	split
		-	...
		- When whiz, can do summersaults with CLI, zsh tools (sed, grep , cut ...)
		and regex.  Not NOW.


-	Separate learning REGEX (grep -P, regex) and using REGEX in R, which I think
	is a tad easier.

###	DEFINTIIONS - as always, crucial
	-	regex is a string;  do not forget this.
	-	META CHARACTERS - ascii (?) characters which by-default have
		non-literal meaning to engine that digests them.  **Engine** specific.
		Must ESCAPE these characters to use as literals.  Other contexts, such
		as unix shell, have similar idea:  `<`, `>' for example, refer to
		**redirect** .    In C, sprintf, `%` indicates formatting and literal
		use.
	-	**To Escape** indicate to underlying engine that this meta character
		should be handled as though literal.

	-	POSIX:
		-	backslash \
		-	[ ]
		-	{ }
		-	( )
		-	caret ^
		-	$
		-	dot .
		-	pipe |
		-	?
		-	asterisk *
		-	`+ -`
		-	``+ - ''
		-	\verbX + - X
		-	\begin{verbatim} 
			+ - 
			\end{verbatim}


###	Render REGEX Verbatim - 4 ways (latex?)

`+ -`

``+ - ''

\verb; + - ;

\verb;+ -;

\begin{verbatim} 
+ - 
\end{verbatim}


-	**Character Class**  Things like [0-9].  
Rmk:  [0-9]+ means repeat one or more of the prior **Character class**   So both 321 and 333 match this regex.


###	Specific to vim/neovim
-	magic = \v   no need to escape (wait till know what doing first) - well, um.

-	magic = `\v`   no need to escape (wait till know what doing first)

###	Specific to R
-	Before regex library (engine) sees code, the **compiler** (byte code?) gets
it first.  Must use double backslash for just one backslash to be seen by
regex engine.   Shell interpreters have no such compiler and single backslash
suffices.

#### Regex grouping:  capture & non-capture

**Perl** PCRE for lookaheads, capture (in R, perl=T)
from !so

Groups that capture you can use later on in the regex to match OR you can use
them in the replacement part of the regex. Making a non-capturing group simply
exempts that group from being used for either of these reasons.


Non-capturing groups are great if you are trying to capture many different
things and there are some groups you don't want to capture. 





** LINUX/

21-July-2023:   Rumors, Linux Mint (now based upon Ubuntu/Canonical ) may be moving to **LMDE** (Linux Mint Debian Edition)
Why?  some issues with Canonical?  Claims that LMDE much firmer ground; Mint will also then be more independent.
2024-01-13 - Linux Mint updates, seems no problem

- Booting ... firmware | bootloader (finds all kernels, os) | grub2 (user
select) ;   
- READ >info grub <CR>
- /kernel is MINIMUM to start;  this is why drivers often need separate install,
not in kernel.
- SWAP - latest Linuxmint built-in, no need
- LinuxMint - installer sets mountpoints
- PARTIONs - \home is separate;  \ for all else (~30-40GB enough)
- Boot drive - needs flag `boot` and `esp` (?)

*** SETUP/CONFIG new machine 
   June 9, 2024 (HP Elitebook, 845, G8 - 2nd HP laptop)
   - *~/dotfiles/create_soft_links.sh*  VERY helpful
   - must re-install:   wezterm (see webpage), i3, zsh, git, emacs,  ZSH, gh
   - public keys .. read debian's guide
   - zsh change shell:   chsh -s $(which zsh)
   - ESC/CAPSLOCK use */etc/default/keyboard*
   - emacs:  FIRST install/config *'use-package'*
   - websites:  Google 1st,  then Firefox (rest should follow)
   - *keep* sh files, links, config files up-to-date AND in dotfiles/backup!


*** format fat32, for copiers
To  make fat32 usb device.(for copier)
1) (optional; too slow)  can put all zeros (optional, slow - ~ 5MB/s  or 200  seconds for 1 GB  on   USB 2.0)
2) sudo parted /dev/sda mklabel msdos   (makes empty partition table, of form MBR)
3) sudo parted /dev/sda mkpart primary fat32 0% 100%  (makes partition)
4) sudo mkfs.fat -F32 /dev/sda   (format  this partiion,  if says   to use -I  do  so!)
5) sudo parted /dev/sdb print   (confirms fat32)

To burn iso on usb (I never got gui's to work)
1) sudo dd bs=4M if=/path/to/file.iso of=/dev/sda status=progress oflag=sync


*** mount usb_device

- format, partition etc.
check fs:
df -Th /dev/sda

-format -NO!  use fat32 (above) to work with  other devices
sudo mkfs.exfat /dev/sda

-mount
mount /dev/sda /media/a_mt_point
(a_mt_point must already exist)


*** remap capslock to escape

{
#		PURPOSE:	**maps ChromeBox "capslock" key to Escape.**
#		-	use > xev to find that capslock is key 133.
#		- xmodmap is older, but simpler to  change key action to  change key
action.
#		- newer is **setxkbmap** but I find more effort to figure out simple things.
#		-	SEE  tech_notes
#		- lots of ways to do this remap. This works, stay with it: 
#
DEPRECTED:

xmodmap -e "keycode 133 = Escape"
Lenovo: capslock keycode = 66,  and escape is 9.  However, capslock still insisting on going in caps lock (UPPER CASE)
setkbmap seems to suggest using caps:swapescape and not caps:escape, but xmodmap won't accept.

}

**	cron job, crontab

{
	grep jim /var/log/syslog  # see cron jobs that ran

	
Sat May 21 18:48:16 PDT 2022
	-	jr changed /etc/rsyslog/50-default.conf
	-	uncomment #cron  -- cron s/d now log to cron.log	
	-	after change, run sudo service rsyslog restart	

-	see cron Icard ('linux')
}

#### Linux Kernel

{
	- one LTS Ubuntu can have many (upstream) kernels
	-	Mix & Match kernels?  X? 
	-	Kernel Upgrade - See INDEX C.

}

*jim_Permissions*
u g o   (user group other)


*** MORE LINUX

####	wifi

	Hopeless?  Ubuntu bug (May 2022) Some notes otherwise:
	-	EAP is protocol |  many pieces | goal:  protect wifi
	-	WPA several versions
	-	supplicant - one end seeks to be authenticated by other end.
	-	Standard is 802.1X

	- nmcli is main cli way. (see INDEX C)
	- networkctl status	
	-	systemctl <command>
	- NOT an issue with GalliumOS (based on 18.04 ubuntu - so stuck here for
		now)


This is block with 3 back ticks AND vimdoc:  boring!


** ZSH notes

*ZSH*
SEE MANUAL: https://zsh.sourceforge.io/Doc/Release/
SEE ZSH GUIDE (2003, Stephenson) https://zsh.sourceforge.io/Guide/zshguide.html
ZSH FAQ (2010) https://zsh.sourceforge.io/FAQ/

~/dotfiles/.zshrc
~/dotfiles/.zshenv
zsh -x  *.sh   # prints line then executes
#!/bin/zsh  -xv # verbose

*** completion, Use zstyle
man zshcompsys
zstyle + 3rd party scripts - do MANY things (completion, modify settings, config VCS_INFO ...)
SEE:  https://thevaluable.dev/zsh-completion-guide-examples/

*VCS_INFO* is a function, used to populate variables (prompt, for ex) *retrieved from vcs, ie git*
SEE: https://arjanvandergaag.nl/blog/customize-zsh-prompt-with-vcs-info.html
SEE: https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Version-Control-Information

USAGE:  *zstyle* <pattern> <style> <values>  and is NOT so OBVIOUS !
if match, apply the style
USAGE:  zstyle <configure><VCS_INFO><OUTPUT>

Completion:  ex:  cd <TAB> completion
zstyle ':completion:*:*:cp:'
zstyle ':completion:*' 

General:
:completion:<fun>:<complete>:<command>:<arguments>:<tag>
- command (cd, rm, etc)
- <tag> (could be files, users, options ??)

*precmd* is hook function, runs before ZSH prompt (SEE manual 9.3.1)
SEE:  https://zsh.sourceforge.io/Doc/Release/Functions.html#Special-Functions 

*** printf
- string(%s), digit(%d); example: digit,pad with by 5 
printf "%05d\n" ${x}

- R:  see sprintf https://www.r-bloggers.com/2010/05/number-formatting/

*** zle = zsh line editor/keymaps/widgets/

*** misc zsh
SEE Serge Gebhardt
widgets correspond to commands, often with shortcut

Given a widget (ex:  '\eb',  ie esc b)
bindkey '\eb' #returns backward-word; ie ESC-b, aka M-b   goes back one word !  
binddky '^b'  # returns backward-charac

bindkey  '\ef' # returns foward-word

bindkey '^a'  # returns beginning-of-line 

zle -al # list of widgets

keymaps=collection of shortcuts
bindkey -l  # vi modes?

To see mapping:
1. cat <CR>; type key; <C-C> ends   (try M-b)
2. <C-V> ; type key

invoke widget:
1. <C-A> bind to shortcut
2. zle <widget>   # to execut
3. sp widget <execute-named-command>
   
TERMCAP - obsolete

 
sudo vs su ....
{

	-	su jim  change to User 'jim'
	- sudo cmd 
		-	last ~ 15'  (temporary use of root privileges)
		-	asks for user's password
		-	allows root 'privileges' but the home directory, path etc remains the
			user's
	- sudo su   # run cmd su (to switch user) with root permissions. (default is
		root)
	- **sudo su -** # run cmd su (to change user) with root permissions AND WITH root
		environment (echo $SHELL will root)
	-	shell:  either login or non-login
	-	non-login has 2 flavors: **interactive** (user at CLI) and **non-interactive** (a
		subshell for scripts)

!askubuntu 376199
!askubuntu 1225041


}


\newpage

drive info

{
	# succinct, useful info
	lsblk --output NAME,UUID,PARTUUID
}


xev  keyboard

{
	-	Keyboard specific, find what *keycode* a button is mapped to:
	- USAGE:  > xev
	- type just 1 button, look for its keycode, keysym on this keyboard
	- example:   q  will be keycode=24, keysym=0x71 called 'q'

}

17JULY2023 - ebook-viewer (calibre) has conflict with caps:swapescape, can not figure out
        REF:  <https://wiki.archlinux.org/title/Xorg/Keyboard_configuration>
FIX:   now using **setxkbmap -option caps:escape (in .xinitrc) **
DEPRECATES anything before 17JULY 2023

xxd 

{

	-  To find how zsh maps a button (A, alt, F2) :  
	-	 USAGE:  > xxd <CR>
	-  press <ALT>+a
	-  terminal displays coding (^[a)
	-	 SEE ROTHGAR
}

*** more zsh

grep_vs_ls

*Grep* always finds words that match a pattern and returns file names of
matches.

ls (+ glob) finds filenames that match a pattern.  Very different.
(same in vim)

*jim_GLOB_examples*
Mostly of form ls or ll or print -l    and **/*
example:   print -l ~/code/**/*.(R|Rmd)   # any level, return all .R and .Rmd
files

See my zsh GLOG handwritten notes (till typed in here)
ZLE	= Zsh line editor | NOT GNU readline\
*zle_widgets* (all commands)

Output from zle -al (~403 cmds)
<snip>

### BINDKEY

*bindkey*  # results, all shortcuts

(sample)
"^A"-"^C" self-insert
"^D" list-choices
"^E"-"^F" self-insert
"^G" list-expand
"^H" vi-backward-delete-char
"^I" expand-or-complete


** Google, API, curl
(1APR2022)
Google's example, with loop for uri_redirect
https://accounts.google.com/o/oauth2/v2/auth?
 scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fyoutube.readonly&
 response_type=code&
 state=security_token%3D138r5719ru3e1%26url%3Dhttps%3A%2F%2Foauth2.example.com%2Ftoken&
 redirect_uri=http%3A//127.0.0.1%3A9004&
 client_id=client_id

	-  Google's authorization server: https://accounts.google.com/o/oauth2/v2/auth

### Finally, Request:  appropriate query sent to:
GET https://www.googleapis.com/youtube/v3/commentThreads 


### From Explorer
GET https://youtube.googleapis.com/youtube/v3/playlists?part=snippet%2CcontentDetails&maxResults=5&mine=true&key=[YOUR_API_KEY] HTTP/1.1

Authorization: Bearer [YOUR_ACCESS_TOKEN]
Accept: application/json


###
same, but as Curl
    
curl \
  'https://youtube.googleapis.com/youtube/v3/playlists?part=snippet%2CcontentDetails&maxResults=5&mine=true&key=[YOUR_API_KEY]' \
  --header 'Authorization: Bearer [YOUR_ACCESS_TOKEN]' \
  --header 'Accept: application/json' \
  --compressed



###   From Google Playground
   https://youtube.googleapis.com/youtube/v3/commentThreads?videoId=Mec9sw1cJk8&part=snippet,replies
###

\newpage
#   CURL |  YOUTUBE API | GOOGLE API |  OAUTH 2.0 | 


\newpage

client = oauth_client(id=  client_id,
        token_url  = token_url,
        secret = client_secret,
        key =  API_KEY,
        auth = "body",   # header or body
			
        name = "youtube_ONE_video_ALL_comments")



req  <-  request("https://www.googleapis.com/youtube/v3/commentThreads?videoId=Mec9sw1cJk8&part=snippet,replies")  %>% 
req_oauth_auth_code(client = client, auth_url = auth_url, token_params=scope[[1]]) 


resp  <- req %>% req_perform()

Some Remarks:
  -	Google is but one implementation of various API, oauth technologies.  The more you read the more confused you may become (at least for me).  
  -	The R package **gargle** is uses **httr** and therefore not my preference.  
  -	I am using httr2 to automate things;  I'd like to understand things using a little as possible:  curl, browser and local server running as localhost.  
  -	Most of the R work is done at lower level, such as packages curl and httpuv.  
	

\newpage

begin{verbatim}
				G O O G L E
end{verbatim}

#### HTTR2 - NOTES (needs clean up!)

PURPOSE:    Demonstrate configuration for HTTR2 and OAUTH2 with Google's Youtube API.

							- uses off-the-shelf `httr2::req_oauth_auth_code()` + configuration
						  - uses authorization code flow.
							- uses redirect_uri localhost, cut & paste (via obo) is deprecated.
							- httr2::  hides almost all details of interaction.
							- use  curl and localhost such as httpuv:: to see lower level

Source:  https://developers.google.com/youtube/v3/guides/auth/installed-apps

RELATED INFO:
  -  Google Explorer (youtube)
	-  Google OAUTH2 playground



```

#	===============================
From Google (Youtube) Explorer:
GET https://youtube.googleapis.com/youtube/v3/playlists?part=snippet%2CcontentDetails&maxResults=5&mine=true&key=[YOUR_API_KEY] HTTP/1.1

Authorization: Bearer [YOUR_ACCESS_TOKEN]
Accept: application/json

#	===============================

```

For youtube (auth code):
echo "curl -Lsv \"https://accounts.google.com/o/oauth2/v2/auth?\
client_id=$client_id&\
redirect_uri=https://127.0.0.1:8080&\
scope=https://www.googleapis.com/auth/youtube&\
response_type=code\""


scope = list(
        "https://www.googleapis.com/auth/youtube",
        "https://www.googleapis.com/auth/youtube.force-ssl")

For youtube (obtain results):
curl \
  'https://youtube.googleapis.com/youtube/v3/playlists?part=snippet%2CcontentDetails&maxResults=5&mine=true&key=[YOUR_API_KEY]' \
  --header 'Authorization: Bearer [YOUR_ACCESS_TOKEN]' \
  --header 'Accept: application/json' \
  --compressed

#### NEEDED SCOPES:
https://www.googleapis.com/auth/youtube	Manage your YouTube account
https://www.googleapis.com/auth/youtube.force-ssl	See, edit, and permanently delete your YouTube videos, ratings, comments and captions


playlistId  =  "PLlXfTHzgMRUIqYrutsFXCOmiqKUgOgGJ5"  # Pavel Grinfeld, Linear Alg 3



\begin{verbatim}
				E N D    G O O G L E
\end{verbatim}

#### Procedure: 
  -		Follow hadley outlines in Vignette for Github and and getting user's information.  (Requires oauth token)
  -  Change for google 
	-  let httr2 handle the details, use this function: httr2::req_oauth_auth_code()
  -  If I have this right, this will (1) get the access token and (2) complete REST
request.


** MOVE !

Source:  Rose Pesotta (HD6509.P47)
1881 - ass'n Alexander III
repression; ends period of limited reform
BUT seed planted during liberalization remains, now underground discussions, travelers, variety of ideas, esp in shetls.   Boys faced constription, but girls if so radicalized faced reality of Jewish culture (babies, domestic work, religion...)
1881 - 1914 1/3 of East Europian Jews go to US.

1760
George III (~ 17) educated, but poor understanding ppl.
Continent (esp France) respect English power, but not English culture, resistance to change, a Parliament that acquiases.   FRANCE is the country with ideas, innovation.





** Pandoc
PANDOC:
!pandoc --metadata=project:xxx --lua-filter doc/panvimdoc/scripts/skip-blocks.lua --lua-filter doc/panvimdoc/scripts/include-files.lua -t doc/panvimdoc/scripts/panvimdoc.lua % -o doc/jimHelp.txt


** MORE CURL
CURL Examples:

cURL write (to standard)
 w response after callling example.com
\begin{verbatim}
curl -w "Response %{response_code}\n" example.com
\end{verbatim}

github
curl https://api.github.com/zen

returns lot of kev=value pairs
curl https://api.github.com/users/defunkt

   -include headers
curl -i https://api.github.com/users/defunkt

   headers only
curl --head <URL>

CURL_CONFIG (a FILE)
 USAGE   curl -K CURL_CONFIG ...


\begin{verbatim}
url = example.com
-w "Type:  Hello  %{local_ip} \n"
\end{verbatim}

Misc Notes:
"State"  - cookies used to be used; now state carried in headers

Misc Notes:
"State"  - cookies used to be used; now state carried in headers  
vim:nospell


** ANDROID

####	Android, Mobile, Cell Phone - notes

RETAIL DEMO UNIT ('retail mode'):
-	ie runs in endless LOOP, no Cell ability, no MEI
-	useable ONLY for wifi
-	Can be BARGAIN, but ...
-	Must unlock bootloader (to remove 'endless loop software' and become regular
	wifi device.  Locked means bootloder hard-coded insist OS match a code.
-	if CAN unlock bootloader , BARGAIN.    Beware endless hours otherwise.

*** Google Pixel 3a XL (my phone)
-	Android 12 = final google update.
- DO expect "unofficial" Android 13 for this phone (sooner or lalter).


*** **OEM Unlock**
- greyed out?   (like mine) then not possible to unlock bootloader itself.
	Means:  no root.   **no ROM install** **no TWRP**
- my pixel is VERISON (sprint?) phone;  not a Google phone;  b/c IMEI begins with 35...  NO way to change bootloader.


*** ADB

- *ADB* DEBUG:  a "mode" that allows installing apps, read logs on Android, file
	transfer... Works by running TCP sever on host (PC) and daemon on device
	(phone) Works by running TCP sever on host (PC) and daemon on device (phone)

- SEE https://www.howtogeek.com/192732/android-usb-connections-explained-mtp-ptp-and-usb-mass-storage/
  - adb --help
  - adb shell <command>
  - adb shell df -h
    - adb shell ls /system/bin  (available cmds)

  - adb push [ -- sync ]   # only push if newer


- Photo tranfer, different.
- **mp3 file transfer** ADB appears to be FUSSY:  remove things like `?` from
	file names or foregin char.   ADB sucks at error messages; chokes; just seem
	to stall.	Just fix the file names and adb will work;  speed is very good;
	but even 25 MB/s  ~ 1.8 GB/min.   Be patient with 40 GB. 

- Bluetooth - wasted plenty of time:  use wired ADB;   some mention Ubuntu &
	bluetooth never got along.   Either way - TIME SINK;  waste.

- *MTP* is protocol to move files;  seems imperfect (CLAIM: now
  standardized, better) ;  PTP for photos

mtp://[usb:001,085]   where 085 refers to device.  (Run lsusb)
-	AVOID this stuff;   **stay with ADB and fix those file names**

-	**adb backup**	disapppointing, time-sink;  THINK backup all all my apps,
	data, but can NOT find clear documentation.  STOP.
-	Do not like Google bloatware.  Expected something like ONEPLUS (which I
	install ROM).  Google's rules, annoyances - must remove.  do not want G-
	ecosystem to point to each of its sister apps.


*** Android os
-   Android is U/I to actual OS, which is **Dalik**, uses java VM **Recovery
    Mode** is separate partition(?) contains just enough code to boot in this
    mode.  Replacing this code is **custom** recovery vs **stock** recovery.
- **FASTBOOT**  purpose to `flash` ROM on device;  level beyond ADB.


** section{Laptop Buying Notes}

**eMMc** is on bmotherboard(embedded), slow but works:  cheap, reliable;  fine to boot.   Check /dev/mmcblk**
SSD is much better, but more expensive.  

*** Lenovo T480
   (stolen May 2024)

-   running Linux Mint (no more Chromebooks)
-   Power, 65W, need brick or wall charger.
-   cable must support 3 Amps
-   buzz words GaN, PD (Power Delivery), no need latest PPS
-   name brands:  Anker, Belkin, "Amazon Basics", **Beware off-brand** buy
  based on what is compatible with T480 (go crazy trying to match standards,
  USB-C 3.1, 3.2, 4.0, generatations, standard or not?)
	

** RUST  (systems level language)

- programmer has control over memory, variables.  Leads to SAFETY and
  PERFORMANCE.   At cost of understanding more about memory etc.		

- *macro* is code that runs at COMPILE time;  inserts compiled code sections.
  (Saves programmer from needing to write common code over and over.)

vim:linebreak:nospell:nowrap:cul tw=78 fo=tqlnr foldcolumn=1 cc=+1
 
