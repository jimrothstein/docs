[
  {
    "objectID": "310_R_notes.html",
    "href": "310_R_notes.html",
    "title": "R Notes",
    "section": "",
    "text": "Note\n\n\n\nAll R, math, statistics notes here.\n\n\n\n\n\n\n\nDo This Week\n\narticle: parse, Lionel, quote, ast etc. https://rpubs.com/lionel-/programming-draft\n012_mtcars - THINK\nhttps://www.rostrum.blog/2023/03/03/getparsedata/\nshipunov - visual statistics, use? (https://stats.libretexts.org/Bookshelves/Introductory_Statistics/Book%3A_Visual_Statistics_Use_R_(Shipunov))\n\n\n\nFuture!\n\nreactR - connect js/html widgets? Need?\nHealth Labs - enter Ox data\nDT\n040 - sapply, joins, cartesian, 1-example each, cheat, see Jeremy Owens SQL table str, foreign key etc.\ntidygeocoder:: US map, simple examples? ### NSE\nReview June’s articles\nQuoting/Eval: Lionel: https://rpubs.com/lionel-/programming-draft\n\nhttps://rpubs.com/lionel-/tidyeval-introduction\nhttps://rpubs.com/lionel-/tidyeval-dplyr-recipes\nfunction masking/pkgs: https://www.r-bloggers.com/2013/09/control-the-function-scope-by-the-r-package-namescope/ (using namespace to control scop)\n{{}} - https://www.r-bloggers.com/2019/06/curly-curly-the-successor-of-bang-bang-2/\nenv stack - https://www.r-bloggers.com/2014/12/tips-on-non-standard-evaluation-in-r/\nquoting, dplyr - https://www.r-bloggers.com/2019/07/bang-bang-how-to-program-with-dplyr/\n2012 namespace pkg, by Hadley, et al : https://cran.r-project.org/web/packages/namespace/index.html\nExamples\nhttp://zevross.com/blog/2018/09/11/writing-efficient-and-streamlined-r-code-with-help-from-the-new-rlang-package/\nManuals:\nns-load: https://stat.ethz.ch/R-manual/R-devel/library/base/html/ns-load.html\ngetFromNamespace: https://stat.ethz.ch/R-manual/R-devel/library/utils/html/getFromNamespace.html\nR-exts:package-ns: https://cran.r-project.org/doc/manuals/R-exts.html#Package-namespaces\nR-ints 1.2 https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Environments-and-variable-lookup\nstackoverflow\nhttps://stackoverflow.com/questions/14988722/in-r-what-does-loaded-via-a-namespace-and-not-attached-mean\n\nPosit\nns, but not in package: https://community.rstudio.com/t/is-it-dangerous-to-create-a-namespace-for-functions-in-a-script-without-a-package/91141\n\nUseful? - wrapr https://winvector.github.io/wrapr/index.html\nfile &lt;- “/home/jim/code/docs/R_DEFINITIONS_AND_EXAMPLES.qmd”\nhttps://cran.r-project.org/manuals.html\nR Language Definition, explains many terms\nMurdoch,  R Journal vol 2/2 2010\nstatisticsglob.com (several parse examples)\nhadley \"version 1, Advanced R, Ch \"expressions\"\nadvanced-r-solutions.rbind.io/expressions.html\nTierney, codeTools ?\n\\section(Definitions}\nexplain process: capture unevaluated code; manipulate it; later evaluate\n\na = 10\nb = 100\n\n# Order?   a+b (110), then sum(110)\n# Or,      sum (a+b), then sum(110)\n\n\ndefuse, substitution, quasiquotation,\ninjection (into unevaluated expression)\ndefuse & inject are opposites\nembrase {{}}, tells function must first evalute the unevaluated content inside {{}}\n\nbindings: - link between name (symbol) and an object - EX: f (name) and the defintion (function(x) {…})\nCall A call is an unevaluted function, together with arguments that are evaluated. Call is NOT a function.\n\nf  &lt;- function(x) {\n    x^2}\n# create a call\ncl  &lt;- call(\"f\", 3)\n# display f as unevaluated f(3)\ncl\n## f(3)\n##  Test for call.\n    is.call(f)\n## [1] FALSE\n    is.call(\"f\")\n## [1] FALSE\n\n    is.call(cl)\n## [1] TRUE\n\n##  To evaluate a call.\n    eval(cl)\n## [1] 9\n# [1] 9\n\nLike symbol, expression, call is typeof 'language'.\nis.call() is T only for calls. See: \"in try... 4010_match_call_examples.Rmd\"\n\nCalling environment of a function To run, a function must be called. Calling environment refers to environment of the calling function. Also called parent environment. Not to be confused with a function environment. See example ??\nCurrying Takes a function, partially evaluates, and returns as new function. Example: f(x,y,z) evaluated at z=a, returns g(x,y) = f(x,y,a)\ncontext internal, stack of C structs, track execution (see R Internals 1.4) Allows flow control | error reporting (traceback) | sys.* to work. (except sys.status)\nClosures create context.  internals do not. primitives only in special\nsituations. (sys.frame, sys.call count closures from either end of context\nstack)  TODO  - do not understand.\n\nContexts are Not counted, not reported, not on stack, and coder has no\naccess to these functions.\n\nREF:  R Internals 1.4\nbyte code “Readable” concise instructions; not machine code; no user access; use JIT compiler or interpeter\nDeparse See parse.\nEvaluation or execution environment In R, a function runs in an environment specific to that function. Also referred to as frame or context. This frame holds evaluation environment. The frame ends when the function completes.\nExpression expression() takes an R object and returns expression, which a R list. Note: a statement is code that may do things (side effects) but does not return anything.\nExpression v Language R expressions based on list and can be broken down further. Often these are language pieces. Lanugage use pairlists.\nFirst Class - A function can also be used as an argument to another function. Example: lapply(list(), mean)\nFrame vs Environment Frame refers to the calling stack of functions. Environment, in R, is property of function, where it looks to find non-local variables.\nFunction, properties formals(f) arguments in function defintion body(f) code environment(f) finds values of non-formal (non-local) variables where the function was created. Higher Order Function Function that takes another function as an argument and …\nInteractive vs. Non-Interactive R, or S, originally designed to be interactive, ie command and response at console. .R, .Rmd, Rscript, R CMD BATCH (TODO: some error conditions do not work in BATCH ??)\nLambda Calculus Instead of naming function (f(x,y) = x^2 + y^2) create abstraction. (x,y) –&gt; x^2 + y^2. Or instead of g(x) = x + 2; write lambdax.x+2. Easy to chain\nLexical Scope How R function finds unbound variables: in environment where function was created. Dynamic Scope Method to find variables in Call Stack at runtime. R uses Lexical Scope, however the R Language allows coder to select environment to evaluate variables. (REF: June Choe Slack/Nov 3 2021)\nScheme added (?) Portion of code in which binding applies to a variable??\nIn R, an “evaluator” find any “unbound symbols” (in an expression) by using variable bindings in effect when created.\nmatch. - match.arg - match.call - match.fun\nnamespace: REF: https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Namespaces | Namespaces are environments associated with packages (and once again the base package is special and will be considered separately). A package pkg defines two environments namespace:pkg and package:pkg: it is package:pkg that can be attached and form part of the search path.\noperator (non-R) An operate takes a function f and returns new function g. Example: f'(x) = g(x)\npackage:\nPairlist\nParent Frame of function If function g() is called inside body of function f, the g has the parent frame (aka calling environment) that is execution environment of f. DRAW Diagram\nParse Convert a string (character vector) into an R Expression, which is NOT a string. Motivation is to setup R object for manipulation before evaluation. Parse(*.R) removes comments. Deparse converts an R Expression to a string (character vector) .\nParse & Deparse are NOT? opposites. See Murdoch\n(latex) parse: string ==&gt; R expression (error if invalid) deparse: R expression ==&gt; string (actually: structure(expression(), scrfile)\noptions Temporary vs global vs local. Read R manual.(TODO)\n\nif, +, sin, sqrt\nC functions\nSEE ADV-R Chapter 6, code: 059 (myoldcode)\nSEE https://nsaunders.wordpress.com/2018/06/22/idle-thoughts-lead-to-r-internals-how-to-count-function-arguments/\nSEE R Internals/Ch 2\nDo not understand at deeper level\n\n\n#   TODO\n#   R complains about putting function in data.frame\n\n### check several functions\ny  &lt;- list(sin, \"sin\", c, switch, typeof, sqrt, `if`, `+`)\n\nquote(sin)\nquote(\"sin\")\nquote(c)\nquote(sqrt)\nquote(`if`)\nquote(`+`)\ndeparse(y)\ndata.frame(object = y,\n           typeof = sapply(y, typeof),\n           is.primitive = sapply(y, is.primitive),\n           is.function = sapply(y, is.function))\n\nR R has two parents: S, based on C, Fortran for statistics. R also has functional component, based on Scheme.\nIt is possible to abuse R, using it more like S code. (?)\nReification Abstract idea to treat all code as “data”, including functions, structures, etc. This means all such objects can be modified by code. C has. (TODO)\nA function f is IF replacing x with its value returns same.\n\nf = function(x) x\nx = 6\nidentical(f(x), f(6))\n## [1] TRUE\n\nHowever, not all R functions have this property.\n\nx=6\nidentical(quote(x), quote(6))\n## [1] FALSE\n\nReferencial Semantics Changes to values are done in memory. There is no copy.\nSubstitute When used in function with formal variable, substitute stops evaluation, captures the user’s code and returns a call (ie unevaluated )\nsyntax How code looks, is { in right place, a grammar.\nSyntax Sugar Syntax to make easier for human to express or write code efficiently.\nVectorize No loops, no for, no lapply. Example:\na &lt;- 1:10^4\nx &lt;- a[a %% 2 == 0]         # select elments of a vector\nExample:   array[i]  vs. get_array(array, i)\nExample:   `+` (1,2) vs.  1 + 2\nsemantics What does the code DO?\nString String (“5+5”) is NOT call. No such thing as evaluating a string. See 0210_ You can PARSE a string and then manipulate it. Simpler to eval a quote(5+5) to return the sum.\nMethod to substitute the value of expr into a string. Can think of it as template with holes.\nSEE: https://www.r-bloggers.com/2018/03/math-notation-for-r-plot-titles-expression-and-bquote/\n\nx = 5 \nbquote(x == .(x))\n## x == 5\n\n## from ethz documentation, takes expr, returns lang ob\ndefault &lt;- 1\n(z = bquote( function(x, y = .(default)) x+y ))\n## function(x, y = 1) x + y\n\ntypeof(z)\n## [1] \"language\"\nis.call(z)  #T\n## [1] TRUE\nis.expression(z) #F \n## [1] FALSE\nis.symbol(z) #F\n## [1] FALSE\n\na = 2\nplot(1:10, a*(1:10), main = bquote(a == .(a)))\n\n\n\n\n\n\nSymbol\n3.1.2 Symbol lookup | In this small example y is a symbol and its value is 4. A symbol is an R object too,\n\ny = 4\ny\n## [1] 4\nis.symbol(y)\n## [1] FALSE\nis.name(y)\n## [1] FALSE\nis.object(y)\n## [1] FALSE\n\n# but\ny = as.symbol(y)\nis.symbol(y)\n## [1] TRUE\ny\n## `4`\n\nSee R Lang Ref: 2.1.3.1 Symbol (aka name), usually name of R object. Use `as.name() to coerce to symbol or quote() or atoms of parse()\n\n\nIn order to manipulate symbols we need a new element in our language: the\nability to quote a data object. Suppose we want to construct the list (a\nb). We can’t accomplish this with (list a b), because this expression\nconstructs a list of the values of a and b rather than the symbols\nthemselves. This issue is well known in the context of natural languages,\nwhere words and sentences may be regarded either as semantic entities or as\ncharacter strings (syntactic entities). The common practice in natural\nlanguages is to use quotation marks to indicate that a word or a sentence\nis to be treated literally as a string of characters. For instance, the\nfirst letter of “John” is clearly “J.” If we tell somebody “say your name\naloud,” we expect to hear that person’s name. However, if we tell somebody\n“say ‘your name’ aloud,” we expect to hear the words “your name.” Note that\nwe are forced to nest quotation marks to describe what somebody else might\nsay. We can follow this same practice to identify lists and symbols that\nare to be treated as data objects rather than as expressions to be\nevaluated. However, our format for quoting differs from that of natural\nlanguages in that we place a quotation mark (traditionally, the single\nquote symbol ’) only at the beginning of the object to be quoted. We can\nget away with this in Scheme syntax because we rely on blanks and\nparentheses to delimit objects. Thus, the meaning of the single quote\ncharacter is to quote the next object. Now we can distinguish between\nsymbols and their values:\n\nhttps://stackoverflow.com/questions/8846628/what-exactly-is-a-symbol-in-lisp-scheme\nVariable Three kinds:\n* formals,x f = function(x= … )\n* local,a f = function() {a =10}\n* free, unbound, global, z f = function() (print(z))\n\n\nfunction\n\nf  &lt;- function(x=NULL) {\n    x^2\n}\n\nformals(f)      ## pairlist\n## $x\n## NULL\nbody(f)         ## language, $\\code{call}$\n## {\n##     x^2\n## }\nenvironment(f)  ## environment\n## &lt;environment: R_GlobalEnv&gt;\n\nargs(f)         ## closure\n## function (x = NULL) \n## NULL\n\n\n## returns expression\nparse(text= '2^2')\n## expression(2^2)\n\n## fails, does not know a is.\n# parse(text= '2a')\n\n\n\ncall\n\nf  &lt;- function(x=NULL) {\n}\n\ncl  &lt;- call(\"f\", list(x=2))\ncl\n## f(list(x = 2))\nis.function(cl)\n## [1] FALSE\nis.call(cl)\n## [1] TRUE\n\n\n##  Args must be evaluated, even if f is unevaluted \n    x  &lt;- 2\n    call(\"f\", list(x))\n## f(list(2))\n    #call(\"f\", list(x=a))   # throws error\n\n\nres  &lt;- substitute(x+a) \nres\n## x + a\nis.call(res)\n## [1] TRUE\n\n\n\n\n\nK-nearest neighbors, K is given\n\\forall x \\in X , which could be any dimension , is already assigned to a region. For a new point, examine its K nearest neighbors who decide by majority vote which region x belongs to. SEE: wine example SEE: Gaglow book.\n\n\nBias-Var Tradeoff.\nWith non-zero noise, of variance \\sigma^{2} the best approximate to f(x) will always have non-zero error: Isn’t there a relation betwee E, VAR? like x and p ?\n\nError = E(f_hat) + Var(f_hat) + \\sigma^{2}\nError \\gteqq 0\n SEE Berkeley Crash Course; Matloff"
  }
]